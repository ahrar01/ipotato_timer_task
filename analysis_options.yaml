# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options


  # For more information see:
  # https://dart.dev/guides/language/analysis-options#enabling-additional-type-checks
analyzer:
  language:
    strict-casts: true
    strict-inference: true
    strict-raw-types: true

  errors:
    close_sinks: ignore
    missing_required_param: error
    missing_return: error

  exclude:
    - test/.test_coverage.dart
    - lib/generated_plugin_registrant.dart

linter:
  rules:
    unnecessary_final: false
    prefer_int_literals: false
    prefer_double_quotes: false
    always_put_required_named_parameters_first: false
    always_put_control_body_on_new_line: false
    always_declare_return_types : true
    sort_constructor_first : true
    always_specify_types : false
    prefer_function_declarations_over_variables: false
    depend_on_referenced_packages: false
    prefer_final_locals : true
    avoid_escaping_inner_quotes : true
    curly_braces_in_flow_control_structures : true
    no_duplicate_case_values : true
    avoid_print : true
    avoid_unnecessary_containers : true
    no_logic_in_create_state : true
    prefer_const_constructors : true
    sized_box_for_whitespace : true
      - always_declare_return_types
    prefer_expression_function_bodies : true
      - always_require_non_null_named_parameters
    annotate_overrides : true
    avoid_catching_errors : true
    avoid_classes_with_only_static_members : true
    avoid_empty_else : true
    avoid_field_initializers_in_const_classes : true
      - avoid_function_literals_in_foreach_calls
      - avoid_implementing_value_types
    avoid_init_to_null : true
    directives_ordering : true
      - avoid_multiple_declarations_per_line
      - avoid_null_checks_in_equality_operators
      - avoid_positional_boolean_parameters

      - avoid_private_typedef_functions
      - avoid_redundant_argument_values
      - avoid_relative_lib_imports
      - avoid_return_types_on_setters
      - avoid_returning_null_for_future
      - avoid_returning_null_for_void
      - avoid_setters_without_getters
      - avoid_shadowing_type_parameters
    avoid_single_cascade_in_expression_statements : true
      - avoid_type_to_string
      - avoid_types_as_parameter_names
      - avoid_unused_constructor_parameters
      - avoid_void_async
      - avoid_web_libraries_in_flutter
      - await_only_futures
      - camel_case_extensions
      - camel_case_types
    cancel_subscriptions : true
      - cast_nullable_to_non_nullable
      - constant_identifier_names
      - control_flow_in_finally
    empty_constructor_bodies : true
    empty_statements : true
      - eol_at_end_of_file
      - exhaustive_cases
      - file_names
      - hash_and_equals
      - implementation_imports
      - invariant_booleans
      - iterable_contains_unrelated_type
      - join_return_with_assignment
      - leading_newlines_in_multiline_strings
      - library_names
      - library_prefixes
      - list_remove_unrelated_type
      - missing_whitespace_between_adjacent_strings
      - no_adjacent_strings_in_list
      - no_duplicate_case_values
    prefer_const_constructors_in_immutables : true

      - prefer_const_literals_to_create_immutables
      - prefer_constructors_over_static_methods
    prefer_contains : true
    prefer_equal_for_default_values: true
    prefer_final_fields : true
    prefer_final_in_for_each : true
    prefer_if_null_operators : true
      - prefer_initializing_formals
      - prefer_inlined_adds
      - prefer_interpolation_to_compose_strings
    prefer_is_empty : true
    prefer_is_not_empty : true
    prefer_is_not_operator : true
      - prefer_iterable_whereType
      - prefer_null_aware_method_calls
    prefer_spread_collections : true
      - prefer_typing_uninitialized_variables
      - prefer_void_to_null
      - provide_deprecation_message
      - recursive_getters
      - require_trailing_commas
      - slash_for_doc_comments
    sort_child_properties_last : true
    sort_unnamed_constructors_first : true
      - test_types_in_equals
      - throw_in_finally
      - tighten_type_of_initializing_formals
      - type_annotate_public_apis
      - type_init_formals
    unnecessary_await_in_return : true
    unnecessary_brace_in_string_interps : true
    unnecessary_const : true
      - unnecessary_getters_setters
    unnecessary_new : true
    unnecessary_null_aware_assignments : true
      - unnecessary_null_checks
      - unnecessary_null_in_if_null_operators
      - unnecessary_nullable_for_final_variable_declarations
    unnecessary_overrides : true
    unnecessary_parenthesis : true
    unnecessary_raw_strings : true
    unnecessary_statements : true
    unnecessary_string_escapes : true
    unnecessary_string_interpolations : true
    unnecessary_this : true
    unrelated_type_equality_checks : true
      - unsafe_html
      - use_build_context_synchronously
      - use_full_hex_values_for_flutter_colors
      - use_function_type_syntax_for_parameters
      - use_named_constants
      - use_late_for_private_fields_and_variables
    use_rethrow_when_possible : true
      - use_setters_to_change_properties
      - use_string_buffers
      - use_test_throws_matchers
      - valid_regexps
      - void_checks
